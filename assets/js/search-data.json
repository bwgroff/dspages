{
  
    
        "post0": {
            "title": "Turing Examples",
            "content": "using Turing using Gadfly using DataFrames, DataFramesMeta . @model function coinflip(y) # prior on p p ~ Beta(1, 1) # updates on p for i in 1:length(y) y[i] ~ Bernoulli(p) end end . coinflip (generic function with 1 method) . data = [1,1,1,0,0,1,0,0,1,1,1,1,1,0,0,0] # Settings of the Hamiltonian Monte Carlo (HMC) sampler. iterations = 1000 ϵ = 0.05 τ = 10 # Start sampling. chain = sample(coinflip(data), HMC(ϵ, τ), iterations, progress=false); . chain . Chains MCMC chain (1000×10×1 Array{Float64,3}): Iterations = 1:1000 Thinning interval = 1 Chains = 1 Samples per chain = 1000 parameters = p internals = acceptance_rate, hamiltonian_energy, hamiltonian_energy_error, is_accept, log_density, lp, n_steps, nom_step_size, step_size Summary Statistics parameters mean std naive_se mcse ess rhat Symbol Float64 Float64 Float64 Float64 Float64 Float64 p 0.5601 0.1163 0.0037 0.0096 248.9978 0.9992 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% Symbol Float64 Float64 Float64 Float64 Float64 p 0.3276 0.4791 0.5643 0.6463 0.7684 . plot(DataFrame(chain), x=:p, Geom.histogram) . p -1.5 -1.0 -0.5 0.0 0.5 1.0 1.5 2.0 2.5 -1.00 -0.95 -0.90 -0.85 -0.80 -0.75 -0.70 -0.65 -0.60 -0.55 -0.50 -0.45 -0.40 -0.35 -0.30 -0.25 -0.20 -0.15 -0.10 -0.05 0.00 0.05 0.10 0.15 0.20 0.25 0.30 0.35 0.40 0.45 0.50 0.55 0.60 0.65 0.70 0.75 0.80 0.85 0.90 0.95 1.00 1.05 1.10 1.15 1.20 1.25 1.30 1.35 1.40 1.45 1.50 1.55 1.60 1.65 1.70 1.75 1.80 1.85 1.90 1.95 2.00 -1 0 1 2 -1.0 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 h,j,k,l,arrows,drag to pan i,o,+,-,scroll,shift-drag to zoom r,dbl-click to reset c for coordinates ? for help ? -30 -25 -20 -15 -10 -5 0 5 10 15 20 25 30 35 40 45 50 55 -25 -24 -23 -22 -21 -20 -19 -18 -17 -16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 -25 0 25 50 -26 -24 -22 -20 -18 -16 -14 -12 -10 -8 -6 -4 -2 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 function logit(x) exp(x) / (1 + exp(x)) end . logit (generic function with 1 method) . data_autocor2 = [1] p_1 = 0.85 p_2 = 0.15 for i in 2:1000 if data_autocor2[i-1] == 1 p = p_1 else p = p_2 end data_autocor2 = cat(data_autocor2, rand(Bernoulli(p)), dims=1) end . @model function coinflip_autocor(y) # prior on p p_1 ~ Beta(1, 1) p_2 ~ Beta(1, 1) y[1] ~ Bernoulli(p_1) for i in 2:length(y) if y[i-1] == 1 p = p_1 else p = p_2 end y[i] ~ Bernoulli(p) end end . coinflip_autocor (generic function with 1 method) . chain = sample(coinflip_autocor(data_autocor2), HMC(ϵ, τ), iterations, progress=false); . chain . Chains MCMC chain (1000×11×1 Array{Float64,3}): Iterations = 1:1000 Thinning interval = 1 Chains = 1 Samples per chain = 1000 parameters = p_1, p_2 internals = acceptance_rate, hamiltonian_energy, hamiltonian_energy_error, is_accept, log_density, lp, n_steps, nom_step_size, step_size Summary Statistics parameters mean std naive_se mcse ess rhat Symbol Float64 Float64 Float64 Float64 Float64 Float64 p_1 0.8901 0.0170 0.0005 0.0002 5224.0866 0.9990 p_2 0.1820 0.0203 0.0006 0.0001 10899.2030 0.9990 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% Symbol Float64 Float64 Float64 Float64 Float64 p_1 0.8625 0.8817 0.8907 0.8998 0.9145 p_2 0.1440 0.1681 0.1820 0.1953 0.2214 . plot(DataFrame(chain), layer(x=:p_1, Geom.density), layer(x=:p_2, Geom.density)) . p_1 -2.0 -1.5 -1.0 -0.5 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 -1.50 -1.45 -1.40 -1.35 -1.30 -1.25 -1.20 -1.15 -1.10 -1.05 -1.00 -0.95 -0.90 -0.85 -0.80 -0.75 -0.70 -0.65 -0.60 -0.55 -0.50 -0.45 -0.40 -0.35 -0.30 -0.25 -0.20 -0.15 -0.10 -0.05 0.00 0.05 0.10 0.15 0.20 0.25 0.30 0.35 0.40 0.45 0.50 0.55 0.60 0.65 0.70 0.75 0.80 0.85 0.90 0.95 1.00 1.05 1.10 1.15 1.20 1.25 1.30 1.35 1.40 1.45 1.50 1.55 1.60 1.65 1.70 1.75 1.80 1.85 1.90 1.95 2.00 2.05 2.10 2.15 2.20 2.25 2.30 2.35 2.40 2.45 2.50 2.55 2.60 2.65 2.70 2.75 2.80 2.85 2.90 2.95 3.00 -2 0 2 4 -1.5 -1.4 -1.3 -1.2 -1.1 -1.0 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3.0 h,j,k,l,arrows,drag to pan i,o,+,-,scroll,shift-drag to zoom r,dbl-click to reset c for coordinates ? for help ? -40 -30 -20 -10 0 10 20 30 40 50 60 70 -30 -29 -28 -27 -26 -25 -24 -23 -22 -21 -20 -19 -18 -17 -16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 -30 0 30 60 -30 -28 -26 -24 -22 -20 -18 -16 -14 -12 -10 -8 -6 -4 -2 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 plot(DataFrame(chain), x=:p_2, Geom.histogram) . p_2 -0.10 -0.05 0.00 0.05 0.10 0.15 0.20 0.25 0.30 0.35 0.40 0.45 -0.050 -0.045 -0.040 -0.035 -0.030 -0.025 -0.020 -0.015 -0.010 -0.005 0.000 0.005 0.010 0.015 0.020 0.025 0.030 0.035 0.040 0.045 0.050 0.055 0.060 0.065 0.070 0.075 0.080 0.085 0.090 0.095 0.100 0.105 0.110 0.115 0.120 0.125 0.130 0.135 0.140 0.145 0.150 0.155 0.160 0.165 0.170 0.175 0.180 0.185 0.190 0.195 0.200 0.205 0.210 0.215 0.220 0.225 0.230 0.235 0.240 0.245 0.250 0.255 0.260 0.265 0.270 0.275 0.280 0.285 0.290 0.295 0.300 0.305 0.310 0.315 0.320 0.325 0.330 0.335 0.340 0.345 0.350 0.355 0.360 0.365 0.370 0.375 0.380 0.385 0.390 0.395 0.400 0.405 -0.2 0.0 0.2 0.4 -0.06 -0.05 -0.04 -0.03 -0.02 -0.01 0.00 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.20 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.30 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.40 h,j,k,l,arrows,drag to pan i,o,+,-,scroll,shift-drag to zoom r,dbl-click to reset c for coordinates ? for help ? -30 -25 -20 -15 -10 -5 0 5 10 15 20 25 30 35 40 45 50 55 -25 -24 -23 -22 -21 -20 -19 -18 -17 -16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 -25 0 25 50 -26 -24 -22 -20 -18 -16 -14 -12 -10 -8 -6 -4 -2 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 How to do this with an honest covariance matrix? What about a &quot;rich get richer&quot; scenario? P(1) ~ b + length of streak of 1s . would look good but how to diagnose issues? distributions of streaks! a lot of extremely long streaks, a lot of short streaks... | . | . what about a &quot;machine error&quot; - double readings for both or one of 1s / 0s? . function streaks(arr) streaks = [] val = arr[1] current_streak = 1 for i in 2:length(arr) next_val = arr[i] if next_val == val current_streak = current_streak + 1 else streaks = cat(streaks, current_streak, dims=1) val = next_val current_streak = 1 end end streaks = cat(streaks, current_streak, dims=1) return streaks end . streaks (generic function with 1 method) . streaks([1,1,1,1,2,2,2,2,3,2,1,2,2,2,1]) . 7-element Array{Any,1}: 4 4 1 1 1 3 1 . plot(DataFrame(x=streaks(data_autocor2)), x=:x, Geom.histogram) . x -100 -80 -60 -40 -20 0 20 40 60 80 100 120 140 160 180 -80 -75 -70 -65 -60 -55 -50 -45 -40 -35 -30 -25 -20 -15 -10 -5 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 105 110 115 120 125 130 135 140 145 150 155 160 -100 0 100 200 -80 -75 -70 -65 -60 -55 -50 -45 -40 -35 -30 -25 -20 -15 -10 -5 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 105 110 115 120 125 130 135 140 145 150 155 160 h,j,k,l,arrows,drag to pan i,o,+,-,scroll,shift-drag to zoom r,dbl-click to reset c for coordinates ? for help ? -30 -25 -20 -15 -10 -5 0 5 10 15 20 25 30 35 40 45 50 55 -25 -24 -23 -22 -21 -20 -19 -18 -17 -16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 -25 0 25 50 -26 -24 -22 -20 -18 -16 -14 -12 -10 -8 -6 -4 -2 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50",
            "url": "https://bwgroff.github.io/dspages/julia/turing/2020/12/30/Turing-examples.html",
            "relUrl": "/julia/turing/2020/12/30/Turing-examples.html",
            "date": " • Dec 30, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "FastAI with Julia",
            "content": "",
            "url": "https://bwgroff.github.io/dspages/julia/fastai/2020/12/28/fastai-with-julia.html",
            "relUrl": "/julia/fastai/2020/12/28/fastai-with-julia.html",
            "date": " • Dec 28, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Some Julia DS basics",
            "content": "using Gadfly using DataFrames, DataFramesMeta using RDatasets . ┌ Info: Precompiling Gadfly [c91e804a-d5a3-530f-b6f0-dfbca275c004] └ @ Base loading.jl:1278 ┌ Info: Precompiling DataFramesMeta [1313f7d8-7da2-5740-9ea0-a2ca25f37964] └ @ Base loading.jl:1278 . Note that this takes .. a .. really .. long .. time. . iris = dataset(&quot;datasets&quot;, &quot;iris&quot;) . SepalLengthSepalWidthPetalLengthPetalWidthSpecies . Float64Float64Float64Float64Cat… . 150 rows × 5 columns . 15.1 | 3.5 | 1.4 | 0.2 | setosa | . 24.9 | 3.0 | 1.4 | 0.2 | setosa | . 34.7 | 3.2 | 1.3 | 0.2 | setosa | . 44.6 | 3.1 | 1.5 | 0.2 | setosa | . 55.0 | 3.6 | 1.4 | 0.2 | setosa | . 65.4 | 3.9 | 1.7 | 0.4 | setosa | . 74.6 | 3.4 | 1.4 | 0.3 | setosa | . 85.0 | 3.4 | 1.5 | 0.2 | setosa | . 94.4 | 2.9 | 1.4 | 0.2 | setosa | . 104.9 | 3.1 | 1.5 | 0.1 | setosa | . 115.4 | 3.7 | 1.5 | 0.2 | setosa | . 124.8 | 3.4 | 1.6 | 0.2 | setosa | . 134.8 | 3.0 | 1.4 | 0.1 | setosa | . 144.3 | 3.0 | 1.1 | 0.1 | setosa | . 155.8 | 4.0 | 1.2 | 0.2 | setosa | . 165.7 | 4.4 | 1.5 | 0.4 | setosa | . 175.4 | 3.9 | 1.3 | 0.4 | setosa | . 185.1 | 3.5 | 1.4 | 0.3 | setosa | . 195.7 | 3.8 | 1.7 | 0.3 | setosa | . 205.1 | 3.8 | 1.5 | 0.3 | setosa | . 215.4 | 3.4 | 1.7 | 0.2 | setosa | . 225.1 | 3.7 | 1.5 | 0.4 | setosa | . 234.6 | 3.6 | 1.0 | 0.2 | setosa | . 245.1 | 3.3 | 1.7 | 0.5 | setosa | . 254.8 | 3.4 | 1.9 | 0.2 | setosa | . 265.0 | 3.0 | 1.6 | 0.2 | setosa | . 275.0 | 3.4 | 1.6 | 0.4 | setosa | . 285.2 | 3.5 | 1.5 | 0.2 | setosa | . 295.2 | 3.4 | 1.4 | 0.2 | setosa | . 304.7 | 3.2 | 1.6 | 0.2 | setosa | . &vellip;&vellip; | &vellip; | &vellip; | &vellip; | &vellip; | . plot(iris, x=:SepalLength, y=:SepalWidth, color=:Species, Geom.point) . SepalLength -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 0.0 0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6 1.8 2.0 2.2 2.4 2.6 2.8 3.0 3.2 3.4 3.6 3.8 4.0 4.2 4.4 4.6 4.8 5.0 5.2 5.4 5.6 5.8 6.0 6.2 6.4 6.6 6.8 7.0 7.2 7.4 7.6 7.8 8.0 8.2 8.4 8.6 8.8 9.0 9.2 9.4 9.6 9.8 10.0 10.2 10.4 10.6 10.8 11.0 11.2 11.4 11.6 11.8 12.0 0 5 10 15 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 8.0 8.5 9.0 9.5 10.0 10.5 11.0 11.5 12.0 setosa versicolor virginica Species h,j,k,l,arrows,drag to pan i,o,+,-,scroll,shift-drag to zoom r,dbl-click to reset c for coordinates ? for help ? -1.0 -0.5 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 -0.5 -0.4 -0.3 -0.2 -0.1 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 4.0 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 6.0 6.1 6.2 6.3 6.4 6.5 6.6 6.7 6.8 6.9 7.0 -2.5 0.0 2.5 5.0 7.5 -0.6 -0.4 -0.2 0.0 0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6 1.8 2.0 2.2 2.4 2.6 2.8 3.0 3.2 3.4 3.6 3.8 4.0 4.2 4.4 4.6 4.8 5.0 5.2 5.4 5.6 5.8 6.0 6.2 6.4 6.6 6.8 7.0 SepalWidth This also takes a long time - hey I thought Julia was supposed to be fast?! . Ok yeah, so the first time you run a function Julia has to compile it. That depends on the types of the function arguments. .",
            "url": "https://bwgroff.github.io/dspages/julia/basics/2020/12/28/First-Post.html",
            "relUrl": "/julia/basics/2020/12/28/First-Post.html",
            "date": " • Dec 28, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Building an Environment",
            "content": "",
            "url": "https://bwgroff.github.io/dspages/julia/reinforcementlearning/2020/12/28/Building-an-Environment.html",
            "relUrl": "/julia/reinforcementlearning/2020/12/28/Building-an-Environment.html",
            "date": " • Dec 28, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "A Simple Agent",
            "content": "",
            "url": "https://bwgroff.github.io/dspages/julia/reinforcementlearning/2020/12/28/A-Simple-Agent.html",
            "relUrl": "/julia/reinforcementlearning/2020/12/28/A-Simple-Agent.html",
            "date": " • Dec 28, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://bwgroff.github.io/dspages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://bwgroff.github.io/dspages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}