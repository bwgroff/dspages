{
  
    
        "post0": {
            "title": "Customer LTV",
            "content": "using Turing using Gadfly using DataFrames, DataFramesMeta Gadfly.set_default_plot_size(900px, 300px) ENV[&quot;COLUMNS&quot;] = 120; . . Customer Lifetime Value (LTV or CLTV) is the total dollar value a consumer will spend at a business throughout their life. The concept is as important as the definition is straightforward - businesses very often want to know which consumers are their whales and which are eating up their marketing or infrastructure budgets with little or no value returned. This is pretty tricky and there are a few approaches you can take: . Observational . Naive calculation. The following will give you an average that is delightfully simple but tragically wrong: . $$ mathrm{LTV} = frac{1}{| mathrm{Customers}|} sum_{ mathrm{orders}} mathrm{Order Value}$$ . Assuming (hmm) that LTV is constant over time, this will converge to the true average LTV value as customers churn (and thus achieve their final lifetime value). New customers will continue to weigh the average down and make it an underestimate. There are some of these sort of equations floating around the tubes. . Wait and see. Simialr algorithm to the above, the major difference is applying this to only a small cohort from a brief window in time. Just follow along with that group and add up how much they spend. This is simple and will get to the true LTV of that cohort faster but it&#39;s still typically too slow to be useful. By the time you know, it&#39;s months/quarters/years later (depending on the churn / repurchasing characteristics of your product) and most insights you might glean are no longer relevant to your product roadmap. . Modeled . Machine Learning :tada:. There are a bunch of ML approaches that can be found relatively easily online (but apparently not easy enough for me to find them again to include here). IIRC, one was using a random forest (or GBM, or whatever) to predict . $$P( mathrm{purchase in next period}| mathcal{D})$$ . and then in a second stage model (conditioned on the purchase outcome) predict the order value of said purchase. . It&#39;s a reasonably standard approach: decompose the problem into churn, expected future purchases, and expected value per purchase. There are a bunch of approaches that are tailored to this decomposition by breaking down the inputs into the so called RFM metrics: . Recency: time since the last purchase, | Frequency: number of purchases per time period, | Monetary value: average order value. | . Note that we&#39;ll use days for the time scale. . Buy &#39;til You Die. This type of model was popularized by Schmittlein, David C., Donald G. Morrison, and Richard Colombo in 1987 but was apparently not very easy to implement. A simpler version was created by Fader, Hardie and Lee and Fader at least built a company that expanded quite a bit on these sorts of models, Zodiac. . Custom Model. That&#39;s what we&#39;re going to do! Fader and Hardie do a great job of making their work look harder than necessary so I can&#39;t be bothered to decode it (and anyway, Alex did a great job). That said, I&#39;m going to take what seems to be a similar approach and takes advantage of some more modern techniques (Julia and Turing.jl!): . Estimate churn based on Recency and Frequency. | Set up a super simple survival model to understand the expected number of future purchases using sample from (1) as the churn signal. | Scale by Monetary value. | By building these submodels out independently we can understood the whole model by figuring it out component-by-component. It also provides a quick way to make single-component adjustments that might be important. There will be many, this model has some real obvious deficiencies even though it captures the right ideas. . For instance, some retailers have an extremely wide spread of possible order values (e.g. Walmart, you can buy a stick of gum or probably a boat or something). If there are orders-of-magnitude differences in purchase value then you better model that out so you know exactly which consumers are likely to find themselves in that lucrative long tail. In my experience, lognormal is a decent start but the tail is still too light. . Our Models . Active from RF . We sample when we expect the customer&#39;s next purchase to occur based on what we&#39;ve observed of their frequency, then we compare that to how long it&#39;s been since they purchased. If we expected them to have purchased already but they haven&#39;t then we count them as churned. . $$ begin{aligned} mathrm{next purchase} &amp; sim mathrm{Exponential}(F) mathrm{active} &amp;= R &lt; mathrm{next purchase} end{aligned} $$Note that we don&#39;t have any kind of regularization and just assume F is a fine number for us. Exercise for the reader to make that more stable :smile:. And also, what should we do about customers with only 1 purchase? :scream: . Future Purchases from RF+Active . We&#39;d like to then take the inferences above and use them to understand churn as a function of time, or perhaps number of orders. In other words: . $$P( mathrm{churned}_{t=i} | mathrm{active}_{t=i-1})$$ . Here we find some wrinkles. Most notably, what to do with consumers that have recently purchased and we don&#39;t know if they are going to churn before the next purchase? This is called censoring, which comes in many directional varieties and this variety is called right-censoring (on the &quot;right&quot; side of our time interval, we don&#39;t yet have data on the outcome). We&#39;ll ignore that for now, and instead assume &quot;constant hazard&quot; on the data we can observe, ie the rate at which users remain active ($ rho$) is constant across all time points. . $$ begin{aligned} rho &amp; sim mathrm{Beta}(1,1) mathrm{purchases}_{uncensored} &amp; sim mathrm{Geometric( rho)} ( mathrm{Future purchases}) &amp; sim begin{cases} mathrm{Geometric}( rho) &amp; mathrm{if active} mathrm{Dirac}(0) &amp; mathrm{otherwise} end{cases} end{aligned} $$LTV from M+Future Purchases . $$ begin{aligned} mathrm{Future value} &amp;= mathrm{Future purchases} * mathrm{AOV} mathrm{Lifetime value} &amp;= mathrm{Future value} + mathrm{Past value} end{aligned} $$ Setting up some Daaaataaa . A little toy dataset to see if the Active model makes any kind of sense. . struct CustomerData days_since_last_purchase::Int64 days_since_first_purchase::Int64 total_purchases::Int64 monetary_value::Float64 end struct RFM raw::CustomerData recency::Int64 frequency::Float64 monetary_value::Float64 total_purchases::Int64 end function rfm(c::CustomerData) period = (c.days_since_first_purchase - c.days_since_last_purchase) / (c.total_purchases - 1) rfm = RFM( c, c.days_since_last_purchase, 1 / period, c.monetary_value, c.total_purchases) end; . rfm_data = [rfm(c) for c in [ CustomerData(2, 60, 5, 3), CustomerData(10, 305, 10, 23), CustomerData(53, 100, 40, 123), # definitely churned! CustomerData(2, 29, 3, 123), CustomerData(10, 200, 5, 23), CustomerData(23, 222, 20, 3), # probably churned.. ]]; . Active Model . @model function active(custs::Array{RFM}) predicted_purchase_days = Vector(undef, length(custs)) active = Vector{Bool}(undef, length(custs)) for i in 1:length(custs) predicted_purchase_days[i] ~ Exponential(1.0 / custs[i].frequency) active[i] = predicted_purchase_days[i] &gt; custs[i].recency end return active end; . iterations = 1000 ϵ = 0.05 τ = 10; chain_ltv = sample( active(rfm_data), HMC(ϵ, τ), iterations, progress=false, drop_warmup=true); . . Let&#39;s see how the model&#39;s output matches up with our expectations: . active_samples = DataFrame(hcat(generated_quantities(active(rfm_data), chain_ltv)...)&#39;) combine(active_samples, :x1 =&gt; mean, :x2 =&gt; mean, :x3 =&gt; mean, :x4 =&gt; mean, :x5 =&gt; mean, :x6 =&gt; mean) . x1_meanx2_meanx3_meanx4_meanx5_meanx6_mean . Float64Float64Float64Float64Float64Float64 . 1 rows × 6 columns . 10.891 | 0.675 | 0.0 | 0.943 | 0.779 | 0.111 | . Here, x1_mean is the probability that the first customer is still active. These numbers look pretty reasonable to me, even though we didn&#39;t account for any uncertainty around F (or, like, what to do with customers that only purchased 1 time... alas). . Notice that I used generated_quantities here. This is possible because we have return active in the model block. The Turing handling of generated quantities is... just ok, sort of awkward to work with. :grimacing: . And with the CDNow dataset... . The raw data can be found here and represents a cohort of users that made their first purchase at CDNow in Q1 of 1997. . using CSV cdnow = CSV.read(&quot;/Users/brad/data/cleaned_cdnow.csv&quot;, DataFrame) # oh no now you know where my filez first(cdnow, 5) . . customerdatecountusd . Int64Date…Int64Float64 . 5 rows × 4 columns . 11 | 1997-01-01 | 1 | 11.77 | . 22 | 1997-01-12 | 1 | 12.0 | . 32 | 1997-01-12 | 5 | 77.0 | . 43 | 1997-01-02 | 2 | 20.76 | . 53 | 1997-03-30 | 2 | 20.76 | . We also need to get it a little closer to RFM format, which gives us the following table: . using Dates cutoff_date = Date(&quot;1997-04-01&quot;) cdnow_gdf = @linq cdnow |&gt; where(:date .&lt; cutoff_date) |&gt; groupby(:customer) pre_rfm = combine(cdnow_gdf, nrow =&gt; :total_purchases, :date =&gt; minimum =&gt; :first_purchase_dt, :date =&gt; maximum =&gt; :latest_purchase_dt, :usd =&gt; sum =&gt; :monetary_value) function days_val(days) return days.value end rfm_df = @linq pre_rfm |&gt; transform( days_since_first_purchase = days_val.(cutoff_date - :first_purchase_dt), days_since_last_purchase = days_val.(cutoff_date - :latest_purchase_dt) ) first(rfm_df, 5) . . customertotal_purchasesfirst_purchase_dtlatest_purchase_dtmonetary_valuedays_since_first_purchasedays_since_last_purchase . Int64Int64DateDateFloat64Int64Int64 . 5 rows × 7 columns . 11 | 1 | 1997-01-01 | 1997-01-01 | 11.77 | 90 | 90 | . 22 | 2 | 1997-01-12 | 1997-01-12 | 89.0 | 79 | 79 | . 33 | 2 | 1997-01-02 | 1997-03-30 | 41.52 | 89 | 2 | . 44 | 2 | 1997-01-01 | 1997-01-18 | 59.06 | 90 | 73 | . 55 | 3 | 1997-01-01 | 1997-02-04 | 82.2 | 90 | 56 | . Which we can blast into RFM format. The model requires some tiny adjustments because in this dataset we have: . Customers with only one purchase, | Customers with only one purchase date but multiple purchases | . rfm_cdn = [ rfm( CustomerData( row.days_since_last_purchase, row.days_since_first_purchase, row.total_purchases, row.monetary_value) ) for row in eachrow(rfm_df)]; . . @model function active_cdn(custs::Array{RFM}) predicted_purchase_days = Vector(undef, length(custs)) active = Vector{Bool}(undef, length(custs)) for i in 1:length(custs) if isnan(custs[i].frequency) | isinf(custs[i].frequency) predicted_purchase_days[i] ~ Exponential(15.0) # median period for multiple purchasers else predicted_purchase_days[i] ~ Exponential(1.0 / custs[i].frequency) end active[i] = predicted_purchase_days[i] &gt; custs[i].recency end return active end; . chain_ltv_cdn = sample( active_cdn(rfm_cdn[1:100]), HMC(ϵ, τ), iterations, progress=true, drop_warmup=true); . Sampling: 100%|█████████████████████████████████████████| Time: 0:00:24 . So yeah, it&#39;s on the slow side.. well not slow given how much cool stuff is happening. There are like 20k customers in this dataset and only the first 100 took 30s. . Future Purchases and LTV Model . @model function future_purchases_cdn(custs::Array{RFM}, total_purchases::Array{Float64}) # Active submodel predicted_purchase_days = Vector(undef, length(custs)) active = Vector{Bool}(undef, length(custs)) for i in 1:length(custs) if isnan(custs[i].frequency) | isinf(custs[i].frequency) predicted_purchase_days[i] ~ Exponential(15.0) # median period for multiple purchasers else predicted_purchase_days[i] ~ Exponential(1.0 / custs[i].frequency) end active[i] = predicted_purchase_days[i] &gt; custs[i].recency end # Future purchases submodel churn_rate ~ Beta(1,1) future_purchases = Vector(undef, length(custs)) for i in 1:length(custs) if !active[i] total_purchases[i] ~ Exponential(churn_rate) future_purchases[i] ~ Exponential(1e-3) else future_purchases[i] ~ Exponential(churn_rate) end end # LTV &quot;model&quot; ltv = future_purchases .* [c.monetary_value for c in custs] return active, ltv end; . total_purchases = [float(r.total_purchases) for r in rfm_cdn] chain_future_purchases = sample( future_purchases_cdn(rfm_cdn[1:100], total_purchases[1:100]), HMC(ϵ, τ), iterations, progress=true, drop_warmup=true); . Sampling: 100%|█████████████████████████████████████████| Time: 0:02:17 . So there&#39;s the model! Unfortunately, wrangling generated_quantities can be annoying so making nice plots will have to wait (more to come!). .",
            "url": "https://www.bwg.is/julia/turing/churn/survival/ltv/2021/01/14/LTV.html",
            "relUrl": "/julia/turing/churn/survival/ltv/2021/01/14/LTV.html",
            "date": " • Jan 14, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Some Simple Models on Binary Data",
            "content": "To get myself comfortable with Julia and Turing.jl, I wrote out a bunch of toy models on the simplest of datasets: a vector of binary outcomes. To keep myself honest and to have something to refer to, I&#39;m reproducing them here. . using Turing using Bijectors using Gadfly using DataFrames, DataFramesMeta Gadfly.set_default_plot_size(900px, 300px) . . Standard Biased Coin Estimation . Coinflipping is a time-honored introductory example for probability, and for good reason. Readily interpretable, amenable to both analytical solutions and manual calculation. Nevermind that &quot;unfair&quot; coins are essentially impossible to make... . We&#39;ll build two models that are essentially the same but have distinct computational profiles. Bernoulli: . $$ begin{aligned} beta &amp; sim mathrm{Beta}(1,1) y_i &amp; sim mathrm{Bernoulli}( beta) end{aligned}$$And Binomial: . $$ begin{aligned} beta &amp; sim mathrm{Beta}(1,1) mathrm{sum}(y) &amp; sim mathrm{Binomial}( mathrm{length}(y), beta) end{aligned}$$ Bernoulli Model . First thing to do is to translate the Bernoulli code above into a @model in Turing (docs): . @model function coinflip_bernoulli(y) # prior on p p ~ Beta(1, 1) # updates on p for i in 1:length(y) y[i] ~ Bernoulli(p) end end; . It looks more or less like the description above, with the loop for i in 1:length(y) serving the same purpose as the subscript of $y_i$. . data = [1,1,1,0,0,1,0,0,1,1,1,1,1,0,0,0,0,0,1,0,0,1,0,0] &quot;There are $(sum(data)) positive results out of $(length(data)) samples, for a positive rate of $(sum(data) / length(data)).&quot; . &#34;There are 11 positive results out of 24 samples, for a positive rate of 0.4583333333333333.&#34; . So let&#39;s see what the model produces (I&#39;ll also highlight the analytical solution for the mean at 0.458). . iterations = 1000 ϵ = 0.05 τ = 10; chain_bernoulli = sample( coinflip_bernoulli(data), HMC(ϵ, τ), iterations, progress=false, drop_warmup=true); plot(DataFrame(chain_bernoulli), x=:p, xintercept=[0.458], Theme(alphas=[0.6]), Stat.density(bandwidth=0.02), Geom.polygon(fill=true, preserve_order=true), Geom.vline, Coord.cartesian(xmin=0.0, xmax=1.0, ymin=0.0), Guide.yticks(label = false) ) . p -1.5 -1.0 -0.5 0.0 0.5 1.0 1.5 2.0 2.5 -1.00 -0.95 -0.90 -0.85 -0.80 -0.75 -0.70 -0.65 -0.60 -0.55 -0.50 -0.45 -0.40 -0.35 -0.30 -0.25 -0.20 -0.15 -0.10 -0.05 0.00 0.05 0.10 0.15 0.20 0.25 0.30 0.35 0.40 0.45 0.50 0.55 0.60 0.65 0.70 0.75 0.80 0.85 0.90 0.95 1.00 1.05 1.10 1.15 1.20 1.25 1.30 1.35 1.40 1.45 1.50 1.55 1.60 1.65 1.70 1.75 1.80 1.85 1.90 1.95 2.00 -1 0 1 2 -1.0 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 h,j,k,l,arrows,drag to pan i,o,+,-,scroll,shift-drag to zoom r,dbl-click to reset c for coordinates ? for help ? Binomial Model . Now let&#39;s take a look at the equivalent model using a Binomial distribution that expresses the exact same underlying phenomena. In Turing: . @model function coinflip_binomial(heads::Int64, flips::Int64) # prior on p p ~ Beta(1, 1) # update on p heads ~ Binomial(flips, p) end; . heads = sum(data) flips = length(data) chain_binomial = sample( coinflip_binomial(heads, flips), HMC(ϵ, τ), iterations, progress=false, drop_warmup=true); plot(DataFrame(chain_binomial), x=:p, xintercept=[0.458], Theme(alphas=[0.6]), Stat.density(bandwidth=0.02), Geom.polygon(fill=true, preserve_order=true), Geom.vline, Coord.cartesian(xmin=0.0, xmax=1.0, ymin=0.0), Guide.yticks(label = false) ) . . p -1.5 -1.0 -0.5 0.0 0.5 1.0 1.5 2.0 2.5 -1.00 -0.95 -0.90 -0.85 -0.80 -0.75 -0.70 -0.65 -0.60 -0.55 -0.50 -0.45 -0.40 -0.35 -0.30 -0.25 -0.20 -0.15 -0.10 -0.05 0.00 0.05 0.10 0.15 0.20 0.25 0.30 0.35 0.40 0.45 0.50 0.55 0.60 0.65 0.70 0.75 0.80 0.85 0.90 0.95 1.00 1.05 1.10 1.15 1.20 1.25 1.30 1.35 1.40 1.45 1.50 1.55 1.60 1.65 1.70 1.75 1.80 1.85 1.90 1.95 2.00 -1 0 1 2 -1.0 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 h,j,k,l,arrows,drag to pan i,o,+,-,scroll,shift-drag to zoom r,dbl-click to reset c for coordinates ? for help ? Other Parameter Spaces . Going further afield, we can also model $ beta$ on an unconstrained scale ($ mathbb{R}$ instead of the unit interval $[0,1]$) by linking the domains with $ mathrm{logit}^{-1}$: . $$ begin{aligned} mathrm{logit}^{-1}&amp;: mathbb{R} to (0, 1) mathrm{logit}^{-1}(x) &amp;= frac{e^x}{e^x + 1} end{aligned}$$Under this transformation, we don&#39;t have to worry about ensuring our parameters stay in the range of $(0,1)$ - check out $ rho$ here: . $$ begin{aligned} rho &amp; sim mathrm{Normal}(0, 5) beta &amp;= mathrm{logit}^{-1}( rho) y_i &amp; sim mathrm{Bernoulli}( beta) end{aligned}$$On it&#39;s own, this seems like a frivolous transformation but it allows us to incorporate multiple signals into our determination of the probability of a positive result. Turns out, this is just logistic regression. Imagine we have one outcome $y$ that depends on several inputs $x_1, x_2, ldots, x_n$: . $$ begin{aligned} rho_i &amp; sim mathrm{Normal}(0,5) beta &amp;= mathrm{logit}^{-1}( rho_1 x_1 + rho_2 x_2 + ldots + rho_n x_n) y_i &amp; sim mathrm{Bernoulli}( beta) end{aligned}$$Because we pass the regression product through $ mathrm{logit}^{-1}$, we know the value of $ beta$ will be between 0 and 1. If we didn&#39;t apply this transformation then adding up the components of $ beta$ could lead to values outside of that range, (and therefore not in the support of the Bernoulli distribution) which would cause the computation to fail. . The same approach works for the Binomial model: . $$ begin{aligned} rho_i &amp; sim mathrm{Normal}(0,5) beta &amp;= mathrm{logit}^{-1}( rho_1 x_1 + rho_2 x_2 + ldots + rho_n x_n) mathrm{sum}(y) &amp; sim mathrm{Binomial}( mathrm{length}(y), beta) end{aligned}$$ Logit calculations . Turing allows us to create a logit function in two ways. One is in pure Julia code (note I didn&#39;t apply a type assertion to the x argument: things can get messy here with automatic differentiation): . function invlogit(x) ex = exp(x) return ex / (1 + ex) end; . It&#39;s also possible to use the same transformations that Turing uses internally from the Bijectors.jl library. Some sampling algorithms like HMC require an unbounded sampling space to (at least up to Float64 constraints...). To support that on bounded domains, the Bijectors library creates functions that map (smoothly) between continuous spaces (Bijectors README). . logit = bijector(Beta()) # bijection: (0, 1) → ℝ inv_logit = inv(logit) # bijection: ℝ → (0, 1) @model function coinflip_invlogit(heads::Int64, flips::Int64) # prior on p logit_p ~ Normal(0, 5) # or any unbounded distribution # update on p heads ~ Binomial(flips, invlogit(logit_p)) end; . &quot;Our favorite value: $(logit(0.458)).&quot; . &#34;Our favorite value: -0.16839681732546127.&#34; . heads = sum(data) flips = length(data) chain_invlogit = sample( coinflip_invlogit(heads, flips), HMC(ϵ, τ), iterations, progress=false, drop_warmup=true); plot(DataFrame(chain_invlogit), x=:logit_p, xintercept=[-0.168], Theme(alphas=[0.6]), Stat.density(bandwidth=0.05), Geom.polygon(fill=true, preserve_order=true), Geom.vline, Coord.cartesian(ymin=0.0), Guide.yticks(label = false) ) . . logit_p -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 -6.0 -5.8 -5.6 -5.4 -5.2 -5.0 -4.8 -4.6 -4.4 -4.2 -4.0 -3.8 -3.6 -3.4 -3.2 -3.0 -2.8 -2.6 -2.4 -2.2 -2.0 -1.8 -1.6 -1.4 -1.2 -1.0 -0.8 -0.6 -0.4 -0.2 0.0 0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6 1.8 2.0 2.2 2.4 2.6 2.8 3.0 3.2 3.4 3.6 3.8 4.0 4.2 4.4 4.6 4.8 5.0 5.2 5.4 5.6 5.8 6.0 -6 -3 0 3 6 -6.0 -5.5 -5.0 -4.5 -4.0 -3.5 -3.0 -2.5 -2.0 -1.5 -1.0 -0.5 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 h,j,k,l,arrows,drag to pan i,o,+,-,scroll,shift-drag to zoom r,dbl-click to reset c for coordinates ? for help ? Note the new x-axis which is the transformation of the previous axis. Here are some helpful values: . $$ begin{aligned} mathrm{logit}^{-1}(1.0) &amp;= 0.73 mathrm{logit}^{-1}(0) &amp;= frac{1}{2} mathrm{logit}^{-1}(-0.168) &amp;= 0.458 mathrm{logit}^{-1}(-1.0) &amp;= 0.27 end{aligned}$$ Performance Difference . Despite describing essentially the same model, performance will differ significantly beteen the Binomial and the Bernoulli cases especially as the volume of data increases. The log-likelihood calculations in each sample loop are $O(1)$ versus $O( mathrm{rows})$, respectively. Here&#39;s a comparison with a modestly larger dataset: . long_data = repeat(data, 10); @time sample( coinflip(long_data), HMC(ϵ, τ), iterations, progress=false); . 3.516949 seconds (32.01 M allocations: 989.621 MiB, 7.51% gc time) . heads = sum(long_data) flips = length(long_data) @time sample( coinflip_binomial(heads, flips), HMC(ϵ, τ), iterations, progress=false); . 0.039479 seconds (329.91 k allocations: 23.239 MiB) . Caution! . Just a little &quot;gotcha&quot; I ran into. The following model won&#39;t work, due to design choices in Turing: . @model function coinflip_BROKEN_THIS_WONT_WORK_AAAAAGH(y::Array{Int64}) # prior on p p ~ Beta(1, 1) # updates on p # these lines are the problem. heads = sum(y) # heads is not RV or argument heads ~ Binomial(length(y), p) # so it can&#39;t be on LHS of ~ end; . The reason is that Turing assumes that all variables on the left hand side of ~ are either . random variables (generated by Turing) or | declared as inputs to the function | By way of analogy to Stan, the @model block of Turing is only intended to represent the parameter, tranformed parameter and model blocks of Stan. As Turing is just Julia code, this is little inconvenience (just do the data transformations in Julia first, it&#39;s more efficient anyway!) but it can be a bit of a surprise and the error message is difficult to interpret. . Incorporating Prior Knowledge . The above models depend on unexplained constants in the Beta distribution ($ mathrm{Beta}(1,1)$ vs, say, $ mathrm{Beta}(13.859, pi^e)$). Those choices were left unjustified and unexplained and here we&#39;ll put some more thought into them. . Let&#39;s assume you are passingly familiar with the concept of flipping coins. Consequently you reasonably expect nearly every coin to be fair and nearly every person you know to not be Persi Diaconis. Personally, I&#39;d need to see a lot of data to accept that a coin had a substantial bias, so in this section we explore how to bake that belief intentionally into our model as a prior distribution (the parameters of Beta, in this case). This is a small change to the model but we&#39;ll explore the impacts of a few alternatives: . $$ begin{aligned} beta &amp; sim mathrm{Beta}(1,1) &amp; mathrm{ versus} beta &amp; sim mathrm{Beta}(5,5) &amp; mathrm{ versus} beta &amp; sim mathrm{Beta}(50,50) &amp; mathrm{ versus} beta &amp; sim mathrm{Beta}(15,5)&amp; mathrm{ (for fun)} end{aligned}$$ In this particular case, the $ mathrm{Beta}$ distribution is what&#39;s known as a conjugate prior for both the Bernoulli and Binomial distributions. That means we can interpret the prior as essentially just bringing more data to do table. For example, we can think of $ mathrm{Beta}(5,5)$ as showing up and pretending we&#39;d already observed $4 = 5-1$ heads and $4=5-1$ tails ahead of time. Similarly, $ mathrm{Beta}(15,5)$ is like baking in knowledge about $14 = 15-1$ heads and $4=5-1$ tails outside of the observed data. The &quot;subtract 1&quot; business is just part of the $ mathrm{Beta}$ distribution details. . x = .001:0.001:.999 Θ = [(1,1), (5,5), (50,50), (15,5)] distributions = [ DataFrame( x=x, ymax=pdf.(Beta(θ[1], θ[2]), x), ymin=0.0, θ=&quot;$θ&quot;) for θ in Θ] plot(vcat(distributions...), x=:x, y=:ymax, ymin=:ymin, ymax=:ymax, color=:θ, Geom.line, Geom.ribbon, Theme(alphas=[0.6]), Guide.ylabel(nothing), Guide.yticks(label=false), Guide.title(&quot;Prior Distributions&quot;), Coord.cartesian(xmin=0.0, xmax=1.0, ymin=0.0) ) . x -1.5 -1.0 -0.5 0.0 0.5 1.0 1.5 2.0 2.5 -1.00 -0.95 -0.90 -0.85 -0.80 -0.75 -0.70 -0.65 -0.60 -0.55 -0.50 -0.45 -0.40 -0.35 -0.30 -0.25 -0.20 -0.15 -0.10 -0.05 0.00 0.05 0.10 0.15 0.20 0.25 0.30 0.35 0.40 0.45 0.50 0.55 0.60 0.65 0.70 0.75 0.80 0.85 0.90 0.95 1.00 1.05 1.10 1.15 1.20 1.25 1.30 1.35 1.40 1.45 1.50 1.55 1.60 1.65 1.70 1.75 1.80 1.85 1.90 1.95 2.00 -1 0 1 2 -1.0 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 (1, 1) (5, 5) (50, 50) (15, 5) θ h,j,k,l,arrows,drag to pan i,o,+,-,scroll,shift-drag to zoom r,dbl-click to reset c for coordinates ? for help ? Prior Distributions @model function coinflip_binomial_prior(heads::Int64, flips::Int64, a, b) # prior on p p ~ Beta(a, b) # update on p heads ~ Binomial(flips, p) end; . Rerunning the same data against each of the prior distributions yields the following new posterior distributions (remember $ mathrm{Beta}(1,1)$ was the original prior). . function tag_column(df, tag) df[!,:θ] .= tag return df end; chain_binomial_by_priors = [tag_column(DataFrame(sample( coinflip_binomial_prior(heads, flips, θ[1], θ[2]), HMC(ϵ, τ), iterations, progress=false, drop_warmup=true)), &quot;$θ&quot;) for θ in Θ]; plot(vcat(chain_binomial_by_priors...), x=:p, xintercept=[0.458], color=:θ,Theme(alphas=[0.4]), Geom.density,Geom.vline, #Stat.density(), Geom.polygon(fill=true, preserve_order=true), Guide.title(&quot;Sampled Posterior Distributions&quot;), Coord.cartesian(xmin=0.0, xmax=1.0, ymin=0.0), Guide.yticks(label = false) ) . . p -1.5 -1.0 -0.5 0.0 0.5 1.0 1.5 2.0 2.5 -1.00 -0.95 -0.90 -0.85 -0.80 -0.75 -0.70 -0.65 -0.60 -0.55 -0.50 -0.45 -0.40 -0.35 -0.30 -0.25 -0.20 -0.15 -0.10 -0.05 0.00 0.05 0.10 0.15 0.20 0.25 0.30 0.35 0.40 0.45 0.50 0.55 0.60 0.65 0.70 0.75 0.80 0.85 0.90 0.95 1.00 1.05 1.10 1.15 1.20 1.25 1.30 1.35 1.40 1.45 1.50 1.55 1.60 1.65 1.70 1.75 1.80 1.85 1.90 1.95 2.00 -1 0 1 2 -1.0 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 (1, 1) (5, 5) (50, 50) (15, 5) θ h,j,k,l,arrows,drag to pan i,o,+,-,scroll,shift-drag to zoom r,dbl-click to reset c for coordinates ? for help ? Sampled Posterior Distributions The posterior samples are compromises between the observed data and the prior distributions. To reinforce the previous point about conjugate priors, here are the analytically deduced posterior distributions: . θ = (26, 18) post_distributions = [ DataFrame( x=x, ymax=pdf.(Beta(θ[1] + 11, θ[2] + 13), x), ymin=0.0, θ=&quot;$θ&quot;) for θ in Θ] plot(vcat(post_distributions...), x=:x, y=:ymax, ymin=:ymin, ymax=:ymax, color=:θ, Geom.line, Geom.ribbon, Theme(alphas=[0.6]), Guide.ylabel(nothing), Guide.yticks(label=false), Guide.title(&quot;Analytical Posterior Distributions&quot;), Coord.cartesian(xmin=0.0, xmax=1.0, ymin=0.0) ) . . x -1.5 -1.0 -0.5 0.0 0.5 1.0 1.5 2.0 2.5 -1.00 -0.95 -0.90 -0.85 -0.80 -0.75 -0.70 -0.65 -0.60 -0.55 -0.50 -0.45 -0.40 -0.35 -0.30 -0.25 -0.20 -0.15 -0.10 -0.05 0.00 0.05 0.10 0.15 0.20 0.25 0.30 0.35 0.40 0.45 0.50 0.55 0.60 0.65 0.70 0.75 0.80 0.85 0.90 0.95 1.00 1.05 1.10 1.15 1.20 1.25 1.30 1.35 1.40 1.45 1.50 1.55 1.60 1.65 1.70 1.75 1.80 1.85 1.90 1.95 2.00 -1 0 1 2 -1.0 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 (1, 1) (5, 5) (50, 50) (15, 5) θ h,j,k,l,arrows,drag to pan i,o,+,-,scroll,shift-drag to zoom r,dbl-click to reset c for coordinates ? for help ? Analytical Posterior Distributions You can see how it lines up with the samples from the posterior via HMC. The fun of something like Turing is that you don&#39;t always have access to simple conjugate priors for your distribution, but you can still do all the same fancy stuff even without pure analytic solutions! .",
            "url": "https://www.bwg.is/julia/turing/binary/2020/12/30/Turing-Examples-1.html",
            "relUrl": "/julia/turing/binary/2020/12/30/Turing-Examples-1.html",
            "date": " • Dec 30, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m Brad, a data scientist with experience building awesome teams. . This is me, and this too! . .",
          "url": "https://www.bwg.is/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://www.bwg.is/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}